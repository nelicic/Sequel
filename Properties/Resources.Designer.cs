//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFUIKitProfessional.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WPFUIKitProfessional.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
        ///
        ///If there is no ELSE part and no conditions are true, it returns NULL..
        /// </summary>
        internal static string _case {
            get {
                return ResourceManager.GetString("case", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The IN operator allows you to specify multiple values in a WHERE clause.
        ///
        ///The IN operator is a shorthand for multiple OR conditions..
        /// </summary>
        internal static string _in {
            get {
                return ResourceManager.GetString("in", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A field with a NULL value is a field with no value.
        ///
        ///If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.                                                          Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!.
        /// </summary>
        internal static string _null {
            get {
                return ResourceManager.GetString("null", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Account.
        /// </summary>
        internal static string account {
            get {
                return ResourceManager.GetString("account", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Achievements.
        /// </summary>
        internal static string achievements {
            get {
                return ResourceManager.GetString("achievements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на SQL aliases are used to give a table, or a column in a table, a temporary name.
        ///Aliases are often used to make column names more readable.
        ///An alias only exists for the duration of that query.
        ///An alias is created with the AS keyword..
        /// </summary>
        internal static string aliases {
            get {
                return ResourceManager.GetString("aliases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The WHERE clause can be combined with AND, OR, and NOT operators.                                                            The AND and OR operators are used to filter records based on more than one condition.                                                                                                                                                                                                              The NOT operator displays a record if the condition(s) is NOT TRUE..
        /// </summary>
        internal static string andornot {
            get {
                return ResourceManager.GetString("andornot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.
        ///                                                                                                                                                                 The ANY operator:
        ///returns a boolean value as a result
        ///returns TRUE if ANY of the subquery values meet the condition
        ///ANY means that the condition will be true if the operation is true for any of the values in the range.
        ///         [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string anyall {
            get {
                return ResourceManager.GetString("anyall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
        ///
        ///The BETWEEN operator is inclusive: begin and end values are included..
        /// </summary>
        internal static string between {
            get {
                return ResourceManager.GetString("between", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Constructor.
        /// </summary>
        internal static string constructor {
            get {
                return ResourceManager.GetString("constructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The DELETE statement is used to delete existing records in a table.                                                Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!                                                                                        It is possible to delete all rows in a table without deleting the table. Thi [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string delete {
            get {
                return ResourceManager.GetString("delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The SELECT DISTINCT statement is used to return only distinct (different) values.
        ///
        ///Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values..
        /// </summary>
        internal static string distinct {
            get {
                return ResourceManager.GetString("distinct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The EXISTS operator is used to test for the existence of any record in a subquery.
        ///
        ///The EXISTS operator returns TRUE if the subquery returns one or more records..
        /// </summary>
        internal static string exist {
            get {
                return ResourceManager.GetString("exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The FROM command is used to specify which table to select or delete data from.
        ///The following SQL statement selects the &quot;CustomerName&quot; and &quot;City&quot; columns from the &quot;Customers&quot; table:.
        /// </summary>
        internal static string from {
            get {
                return ResourceManager.GetString("from", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.
        ///
        ///Tip: FULL OUTER JOIN and FULL JOIN are the same..
        /// </summary>
        internal static string full {
            get {
                return ResourceManager.GetString("full", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The COUNT() function returns the number of rows that matches a specified criterion.
        ///
        ///The AVG() function returns the average value of a numeric column. 
        ///
        ///The SUM() function returns the total sum of a numeric column..
        /// </summary>
        internal static string functions {
            get {
                return ResourceManager.GetString("functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The GROUP BY statement groups rows that have the same values into summary rows, like &quot;find the number of customers in each country&quot;.
        ///
        ///The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns..
        /// </summary>
        internal static string groupby {
            get {
                return ResourceManager.GetString("groupby", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Guide.
        /// </summary>
        internal static string guide {
            get {
                return ResourceManager.GetString("guide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions..
        /// </summary>
        internal static string having {
            get {
                return ResourceManager.GetString("having", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Home.
        /// </summary>
        internal static string home {
            get {
                return ResourceManager.GetString("home", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The INNER JOIN keyword selects records that have matching values in both tables..
        /// </summary>
        internal static string inner {
            get {
                return ResourceManager.GetString("inner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The INSERT INTO statement is used to insert new records in a table.                                                          It is possible to write the INSERT INTO statement in two ways:
        ///
        ///1. Specify both the column names and the values to be inserted.                                                               2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string insertinto {
            get {
                return ResourceManager.GetString("insertinto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
        ///(INNER) JOIN: Returns records that have matching values in both tables
        ///LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
        ///RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
        ///FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.
        /// </summary>
        internal static string join {
            get {
                return ResourceManager.GetString("join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match..
        /// </summary>
        internal static string left {
            get {
                return ResourceManager.GetString("left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
        ///
        ///There are two wildcards often used in conjunction with the LIKE operator:
        ///
        /// The percent sign (%) represents zero, one, or multiple characters
        /// The underscore sign (_) represents one, single character.
        /// </summary>
        internal static string like {
            get {
                return ResourceManager.GetString("like", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The LIMIT clause is used to specify the number of records to return.
        ///
        ///The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance..
        /// </summary>
        internal static string limit {
            get {
                return ResourceManager.GetString("limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Levels.
        /// </summary>
        internal static string lvl {
            get {
                return ResourceManager.GetString("lvl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Level Constructor.
        /// </summary>
        internal static string lvlconstructor {
            get {
                return ResourceManager.GetString("lvlconstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The MIN() function returns the smallest value of the selected column.
        ///
        ///The MAX() function returns the largest value of the selected column..
        /// </summary>
        internal static string minmax {
            get {
                return ResourceManager.GetString("minmax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The ORDER BY keyword is used to sort the result-set in ascending or descending order.
        ///
        ///The ORDER BY keyword sorts the records in ascending order by default(ASC). To sort the records in descending order, use the DESC keyword..
        /// </summary>
        internal static string orderby {
            get {
                return ResourceManager.GetString("orderby", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Password.
        /// </summary>
        internal static string PasswordHint {
            get {
                return ResourceManager.GetString("PasswordHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match..
        /// </summary>
        internal static string right {
            get {
                return ResourceManager.GetString("right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sandbox.
        /// </summary>
        internal static string sandbox {
            get {
                return ResourceManager.GetString("sandbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The SELECT statement is used to select data from a database.
        ///The data returned is stored in a result table, called the result-set..
        /// </summary>
        internal static string select {
            get {
                return ResourceManager.GetString("select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A self join is a regular join, but the table is joined with itself.
        ///T1 and T2 are different table aliases for the same table..
        /// </summary>
        internal static string self {
            get {
                return ResourceManager.GetString("self", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings.
        /// </summary>
        internal static string settings {
            get {
                return ResourceManager.GetString("settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The UNION operator is used to combine the result-set of two or more SELECT statements.
        ///Every SELECT statement within UNION must have the same number of columns
        ///The columns must also have similar data types
        ///The columns in every SELECT statement must also be in the same order
        ///The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL..
        /// </summary>
        internal static string union {
            get {
                return ResourceManager.GetString("union", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The UPDATE statement is used to modify the existing records in a table. Note: Be careful when updating records in a table!                                                                                                                Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!.
        /// </summary>
        internal static string update {
            get {
                return ResourceManager.GetString("update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The WHERE clause is used to filter records.
        ///It is used to extract only those records that fulfill a specified condition.                                                              Operators: =, &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;,                                                                                                                  BETWEEN - Between a certain range, LIKE - Search for a pattern, IN - To specify multiple possible values for a column.
        /// </summary>
        internal static string where {
            get {
                return ResourceManager.GetString("where", resourceCulture);
            }
        }
    }
}
